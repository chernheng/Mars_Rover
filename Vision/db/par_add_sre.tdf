--parallel_add DEVICE_FAMILY="MAX 10" MSW_SUBTRACT="NO" PIPELINE=2 REPRESENTATION="UNSIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=9 WIDTH=15 WIDTHR=19 clock data result
--VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_padd 2016:10:24:15:04:16:SJ cbx_parallel_add 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ cbx_util_mgl 2016:10:24:15:04:16:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 135 reg 156 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to dffe1} POWER_UP_LEVEL=LOW;{-to dffe10} POWER_UP_LEVEL=LOW;{-to dffe100} POWER_UP_LEVEL=LOW;{-to dffe101} POWER_UP_LEVEL=LOW;{-to dffe102} POWER_UP_LEVEL=LOW;{-to dffe103} POWER_UP_LEVEL=LOW;{-to dffe104} POWER_UP_LEVEL=LOW;{-to dffe105} POWER_UP_LEVEL=LOW;{-to dffe106} POWER_UP_LEVEL=LOW;{-to dffe107} POWER_UP_LEVEL=LOW;{-to dffe108} POWER_UP_LEVEL=LOW;{-to dffe109} POWER_UP_LEVEL=LOW;{-to dffe11} POWER_UP_LEVEL=LOW;{-to dffe110} POWER_UP_LEVEL=LOW;{-to dffe111} POWER_UP_LEVEL=LOW;{-to dffe112} POWER_UP_LEVEL=LOW;{-to dffe113} POWER_UP_LEVEL=LOW;{-to dffe114} POWER_UP_LEVEL=LOW;{-to dffe115} POWER_UP_LEVEL=LOW;{-to dffe116} POWER_UP_LEVEL=LOW;{-to dffe117} POWER_UP_LEVEL=LOW;{-to dffe118} POWER_UP_LEVEL=LOW;{-to dffe119} POWER_UP_LEVEL=LOW;{-to dffe12} POWER_UP_LEVEL=LOW;{-to dffe120} POWER_UP_LEVEL=LOW;{-to dffe121} POWER_UP_LEVEL=LOW;{-to dffe122} POWER_UP_LEVEL=LOW;{-to dffe123} POWER_UP_LEVEL=LOW;{-to dffe124} POWER_UP_LEVEL=LOW;{-to dffe125} POWER_UP_LEVEL=LOW;{-to dffe126} POWER_UP_LEVEL=LOW;{-to dffe127} POWER_UP_LEVEL=LOW;{-to dffe128} POWER_UP_LEVEL=LOW;{-to dffe129} POWER_UP_LEVEL=LOW;{-to dffe13} POWER_UP_LEVEL=LOW;{-to dffe130} POWER_UP_LEVEL=LOW;{-to dffe131} POWER_UP_LEVEL=LOW;{-to dffe132} POWER_UP_LEVEL=LOW;{-to dffe133} POWER_UP_LEVEL=LOW;{-to dffe134} POWER_UP_LEVEL=LOW;{-to dffe135} POWER_UP_LEVEL=LOW;{-to dffe136} POWER_UP_LEVEL=LOW;{-to dffe137} POWER_UP_LEVEL=LOW;{-to dffe138} POWER_UP_LEVEL=LOW;{-to dffe139} POWER_UP_LEVEL=LOW;{-to dffe14} POWER_UP_LEVEL=LOW;{-to dffe140} POWER_UP_LEVEL=LOW;{-to dffe141} POWER_UP_LEVEL=LOW;{-to dffe142} POWER_UP_LEVEL=LOW;{-to dffe143} POWER_UP_LEVEL=LOW;{-to dffe144} POWER_UP_LEVEL=LOW";
OPTIONS ALTERA_INTERNAL_OPTION = "{-to dffe145} POWER_UP_LEVEL=LOW;{-to dffe146} POWER_UP_LEVEL=LOW;{-to dffe147} POWER_UP_LEVEL=LOW;{-to dffe148} POWER_UP_LEVEL=LOW;{-to dffe149} POWER_UP_LEVEL=LOW;{-to dffe15} POWER_UP_LEVEL=LOW;{-to dffe150} POWER_UP_LEVEL=LOW;{-to dffe151} POWER_UP_LEVEL=LOW;{-to dffe152} POWER_UP_LEVEL=LOW;{-to dffe153} POWER_UP_LEVEL=LOW;{-to dffe154} POWER_UP_LEVEL=LOW;{-to dffe155} POWER_UP_LEVEL=LOW;{-to dffe156} POWER_UP_LEVEL=LOW;{-to dffe16} POWER_UP_LEVEL=LOW;{-to dffe17} POWER_UP_LEVEL=LOW;{-to dffe18} POWER_UP_LEVEL=LOW;{-to dffe19} POWER_UP_LEVEL=LOW;{-to dffe2} POWER_UP_LEVEL=LOW;{-to dffe20} POWER_UP_LEVEL=LOW;{-to dffe21} POWER_UP_LEVEL=LOW;{-to dffe22} POWER_UP_LEVEL=LOW;{-to dffe23} POWER_UP_LEVEL=LOW;{-to dffe24} POWER_UP_LEVEL=LOW;{-to dffe25} POWER_UP_LEVEL=LOW;{-to dffe26} POWER_UP_LEVEL=LOW;{-to dffe27} POWER_UP_LEVEL=LOW;{-to dffe28} POWER_UP_LEVEL=LOW;{-to dffe29} POWER_UP_LEVEL=LOW;{-to dffe3} POWER_UP_LEVEL=LOW;{-to dffe30} POWER_UP_LEVEL=LOW;{-to dffe31} POWER_UP_LEVEL=LOW;{-to dffe32} POWER_UP_LEVEL=LOW;{-to dffe33} POWER_UP_LEVEL=LOW;{-to dffe34} POWER_UP_LEVEL=LOW;{-to dffe35} POWER_UP_LEVEL=LOW;{-to dffe36} POWER_UP_LEVEL=LOW;{-to dffe37} POWER_UP_LEVEL=LOW;{-to dffe38} POWER_UP_LEVEL=LOW;{-to dffe39} POWER_UP_LEVEL=LOW;{-to dffe4} POWER_UP_LEVEL=LOW;{-to dffe40} POWER_UP_LEVEL=LOW;{-to dffe41} POWER_UP_LEVEL=LOW;{-to dffe42} POWER_UP_LEVEL=LOW;{-to dffe43} POWER_UP_LEVEL=LOW;{-to dffe44} POWER_UP_LEVEL=LOW;{-to dffe45} POWER_UP_LEVEL=LOW;{-to dffe46} POWER_UP_LEVEL=LOW;{-to dffe47} POWER_UP_LEVEL=LOW;{-to dffe48} POWER_UP_LEVEL=LOW;{-to dffe49} POWER_UP_LEVEL=LOW;{-to dffe5} POWER_UP_LEVEL=LOW;{-to dffe50} POWER_UP_LEVEL=LOW";
OPTIONS ALTERA_INTERNAL_OPTION = "{-to dffe51} POWER_UP_LEVEL=LOW;{-to dffe52} POWER_UP_LEVEL=LOW;{-to dffe53} POWER_UP_LEVEL=LOW;{-to dffe54} POWER_UP_LEVEL=LOW;{-to dffe55} POWER_UP_LEVEL=LOW;{-to dffe56} POWER_UP_LEVEL=LOW;{-to dffe57} POWER_UP_LEVEL=LOW;{-to dffe58} POWER_UP_LEVEL=LOW;{-to dffe59} POWER_UP_LEVEL=LOW;{-to dffe6} POWER_UP_LEVEL=LOW;{-to dffe60} POWER_UP_LEVEL=LOW;{-to dffe61} POWER_UP_LEVEL=LOW;{-to dffe62} POWER_UP_LEVEL=LOW;{-to dffe63} POWER_UP_LEVEL=LOW;{-to dffe64} POWER_UP_LEVEL=LOW;{-to dffe65} POWER_UP_LEVEL=LOW;{-to dffe66} POWER_UP_LEVEL=LOW;{-to dffe67} POWER_UP_LEVEL=LOW;{-to dffe68} POWER_UP_LEVEL=LOW;{-to dffe69} POWER_UP_LEVEL=LOW;{-to dffe7} POWER_UP_LEVEL=LOW;{-to dffe70} POWER_UP_LEVEL=LOW;{-to dffe71} POWER_UP_LEVEL=LOW;{-to dffe72} POWER_UP_LEVEL=LOW;{-to dffe73} POWER_UP_LEVEL=LOW;{-to dffe74} POWER_UP_LEVEL=LOW;{-to dffe75} POWER_UP_LEVEL=LOW;{-to dffe76} POWER_UP_LEVEL=LOW;{-to dffe77} POWER_UP_LEVEL=LOW;{-to dffe78} POWER_UP_LEVEL=LOW;{-to dffe79} POWER_UP_LEVEL=LOW;{-to dffe8} POWER_UP_LEVEL=LOW;{-to dffe80} POWER_UP_LEVEL=LOW;{-to dffe81} POWER_UP_LEVEL=LOW;{-to dffe82} POWER_UP_LEVEL=LOW;{-to dffe83} POWER_UP_LEVEL=LOW;{-to dffe84} POWER_UP_LEVEL=LOW;{-to dffe85} POWER_UP_LEVEL=LOW;{-to dffe86} POWER_UP_LEVEL=LOW;{-to dffe87} POWER_UP_LEVEL=LOW;{-to dffe88} POWER_UP_LEVEL=LOW;{-to dffe89} POWER_UP_LEVEL=LOW;{-to dffe9} POWER_UP_LEVEL=LOW;{-to dffe90} POWER_UP_LEVEL=LOW;{-to dffe91} POWER_UP_LEVEL=LOW;{-to dffe92} POWER_UP_LEVEL=LOW;{-to dffe93} POWER_UP_LEVEL=LOW;{-to dffe94} POWER_UP_LEVEL=LOW;{-to dffe95} POWER_UP_LEVEL=LOW;{-to dffe96} POWER_UP_LEVEL=LOW;{-to dffe97} POWER_UP_LEVEL=LOW;{-to dffe98} POWER_UP_LEVEL=LOW";
OPTIONS ALTERA_INTERNAL_OPTION = "{-to dffe99} POWER_UP_LEVEL=LOW";

SUBDESIGN par_add_sre
( 
	clock	:	input;
	data[134..0]	:	input;
	result[18..0]	:	output;
) 
VARIABLE
	add157_result[15..0]	:	WIRE;
	add161_result[16..0]	:	WIRE;
	add165_result[15..0]	:	WIRE;
	add169_result[17..0]	:	WIRE;
	add173_result[15..0]	:	WIRE;
	add177_result[15..0]	:	WIRE;
	add181_result[16..0]	:	WIRE;
	add185_result[18..0]	:	WIRE;
	dffe1 : dffe
		WITH (
			power_up = "low"
		);
	dffe10 : dffe
		WITH (
			power_up = "low"
		);
	dffe100 : dffe
		WITH (
			power_up = "low"
		);
	dffe101 : dffe
		WITH (
			power_up = "low"
		);
	dffe102 : dffe
		WITH (
			power_up = "low"
		);
	dffe103 : dffe
		WITH (
			power_up = "low"
		);
	dffe104 : dffe
		WITH (
			power_up = "low"
		);
	dffe105 : dffe
		WITH (
			power_up = "low"
		);
	dffe106 : dffe
		WITH (
			power_up = "low"
		);
	dffe107 : dffe
		WITH (
			power_up = "low"
		);
	dffe108 : dffe
		WITH (
			power_up = "low"
		);
	dffe109 : dffe
		WITH (
			power_up = "low"
		);
	dffe11 : dffe
		WITH (
			power_up = "low"
		);
	dffe110 : dffe
		WITH (
			power_up = "low"
		);
	dffe111 : dffe
		WITH (
			power_up = "low"
		);
	dffe112 : dffe
		WITH (
			power_up = "low"
		);
	dffe113 : dffe
		WITH (
			power_up = "low"
		);
	dffe114 : dffe
		WITH (
			power_up = "low"
		);
	dffe115 : dffe
		WITH (
			power_up = "low"
		);
	dffe116 : dffe
		WITH (
			power_up = "low"
		);
	dffe117 : dffe
		WITH (
			power_up = "low"
		);
	dffe118 : dffe
		WITH (
			power_up = "low"
		);
	dffe119 : dffe
		WITH (
			power_up = "low"
		);
	dffe12 : dffe
		WITH (
			power_up = "low"
		);
	dffe120 : dffe
		WITH (
			power_up = "low"
		);
	dffe121 : dffe
		WITH (
			power_up = "low"
		);
	dffe122 : dffe
		WITH (
			power_up = "low"
		);
	dffe123 : dffe
		WITH (
			power_up = "low"
		);
	dffe124 : dffe
		WITH (
			power_up = "low"
		);
	dffe125 : dffe
		WITH (
			power_up = "low"
		);
	dffe126 : dffe
		WITH (
			power_up = "low"
		);
	dffe127 : dffe
		WITH (
			power_up = "low"
		);
	dffe128 : dffe
		WITH (
			power_up = "low"
		);
	dffe129 : dffe
		WITH (
			power_up = "low"
		);
	dffe13 : dffe
		WITH (
			power_up = "low"
		);
	dffe130 : dffe
		WITH (
			power_up = "low"
		);
	dffe131 : dffe
		WITH (
			power_up = "low"
		);
	dffe132 : dffe
		WITH (
			power_up = "low"
		);
	dffe133 : dffe
		WITH (
			power_up = "low"
		);
	dffe134 : dffe
		WITH (
			power_up = "low"
		);
	dffe135 : dffe
		WITH (
			power_up = "low"
		);
	dffe136 : dffe
		WITH (
			power_up = "low"
		);
	dffe137 : dffe
		WITH (
			power_up = "low"
		);
	dffe138 : dffe
		WITH (
			power_up = "low"
		);
	dffe139 : dffe
		WITH (
			power_up = "low"
		);
	dffe14 : dffe
		WITH (
			power_up = "low"
		);
	dffe140 : dffe
		WITH (
			power_up = "low"
		);
	dffe141 : dffe
		WITH (
			power_up = "low"
		);
	dffe142 : dffe
		WITH (
			power_up = "low"
		);
	dffe143 : dffe
		WITH (
			power_up = "low"
		);
	dffe144 : dffe
		WITH (
			power_up = "low"
		);
	dffe145 : dffe
		WITH (
			power_up = "low"
		);
	dffe146 : dffe
		WITH (
			power_up = "low"
		);
	dffe147 : dffe
		WITH (
			power_up = "low"
		);
	dffe148 : dffe
		WITH (
			power_up = "low"
		);
	dffe149 : dffe
		WITH (
			power_up = "low"
		);
	dffe15 : dffe
		WITH (
			power_up = "low"
		);
	dffe150 : dffe
		WITH (
			power_up = "low"
		);
	dffe151 : dffe
		WITH (
			power_up = "low"
		);
	dffe152 : dffe
		WITH (
			power_up = "low"
		);
	dffe153 : dffe
		WITH (
			power_up = "low"
		);
	dffe154 : dffe
		WITH (
			power_up = "low"
		);
	dffe155 : dffe
		WITH (
			power_up = "low"
		);
	dffe156 : dffe
		WITH (
			power_up = "low"
		);
	dffe16 : dffe
		WITH (
			power_up = "low"
		);
	dffe17 : dffe
		WITH (
			power_up = "low"
		);
	dffe18 : dffe
		WITH (
			power_up = "low"
		);
	dffe19 : dffe
		WITH (
			power_up = "low"
		);
	dffe2 : dffe
		WITH (
			power_up = "low"
		);
	dffe20 : dffe
		WITH (
			power_up = "low"
		);
	dffe21 : dffe
		WITH (
			power_up = "low"
		);
	dffe22 : dffe
		WITH (
			power_up = "low"
		);
	dffe23 : dffe
		WITH (
			power_up = "low"
		);
	dffe24 : dffe
		WITH (
			power_up = "low"
		);
	dffe25 : dffe
		WITH (
			power_up = "low"
		);
	dffe26 : dffe
		WITH (
			power_up = "low"
		);
	dffe27 : dffe
		WITH (
			power_up = "low"
		);
	dffe28 : dffe
		WITH (
			power_up = "low"
		);
	dffe29 : dffe
		WITH (
			power_up = "low"
		);
	dffe3 : dffe
		WITH (
			power_up = "low"
		);
	dffe30 : dffe
		WITH (
			power_up = "low"
		);
	dffe31 : dffe
		WITH (
			power_up = "low"
		);
	dffe32 : dffe
		WITH (
			power_up = "low"
		);
	dffe33 : dffe
		WITH (
			power_up = "low"
		);
	dffe34 : dffe
		WITH (
			power_up = "low"
		);
	dffe35 : dffe
		WITH (
			power_up = "low"
		);
	dffe36 : dffe
		WITH (
			power_up = "low"
		);
	dffe37 : dffe
		WITH (
			power_up = "low"
		);
	dffe38 : dffe
		WITH (
			power_up = "low"
		);
	dffe39 : dffe
		WITH (
			power_up = "low"
		);
	dffe4 : dffe
		WITH (
			power_up = "low"
		);
	dffe40 : dffe
		WITH (
			power_up = "low"
		);
	dffe41 : dffe
		WITH (
			power_up = "low"
		);
	dffe42 : dffe
		WITH (
			power_up = "low"
		);
	dffe43 : dffe
		WITH (
			power_up = "low"
		);
	dffe44 : dffe
		WITH (
			power_up = "low"
		);
	dffe45 : dffe
		WITH (
			power_up = "low"
		);
	dffe46 : dffe
		WITH (
			power_up = "low"
		);
	dffe47 : dffe
		WITH (
			power_up = "low"
		);
	dffe48 : dffe
		WITH (
			power_up = "low"
		);
	dffe49 : dffe
		WITH (
			power_up = "low"
		);
	dffe5 : dffe
		WITH (
			power_up = "low"
		);
	dffe50 : dffe
		WITH (
			power_up = "low"
		);
	dffe51 : dffe
		WITH (
			power_up = "low"
		);
	dffe52 : dffe
		WITH (
			power_up = "low"
		);
	dffe53 : dffe
		WITH (
			power_up = "low"
		);
	dffe54 : dffe
		WITH (
			power_up = "low"
		);
	dffe55 : dffe
		WITH (
			power_up = "low"
		);
	dffe56 : dffe
		WITH (
			power_up = "low"
		);
	dffe57 : dffe
		WITH (
			power_up = "low"
		);
	dffe58 : dffe
		WITH (
			power_up = "low"
		);
	dffe59 : dffe
		WITH (
			power_up = "low"
		);
	dffe6 : dffe
		WITH (
			power_up = "low"
		);
	dffe60 : dffe
		WITH (
			power_up = "low"
		);
	dffe61 : dffe
		WITH (
			power_up = "low"
		);
	dffe62 : dffe
		WITH (
			power_up = "low"
		);
	dffe63 : dffe
		WITH (
			power_up = "low"
		);
	dffe64 : dffe
		WITH (
			power_up = "low"
		);
	dffe65 : dffe
		WITH (
			power_up = "low"
		);
	dffe66 : dffe
		WITH (
			power_up = "low"
		);
	dffe67 : dffe
		WITH (
			power_up = "low"
		);
	dffe68 : dffe
		WITH (
			power_up = "low"
		);
	dffe69 : dffe
		WITH (
			power_up = "low"
		);
	dffe7 : dffe
		WITH (
			power_up = "low"
		);
	dffe70 : dffe
		WITH (
			power_up = "low"
		);
	dffe71 : dffe
		WITH (
			power_up = "low"
		);
	dffe72 : dffe
		WITH (
			power_up = "low"
		);
	dffe73 : dffe
		WITH (
			power_up = "low"
		);
	dffe74 : dffe
		WITH (
			power_up = "low"
		);
	dffe75 : dffe
		WITH (
			power_up = "low"
		);
	dffe76 : dffe
		WITH (
			power_up = "low"
		);
	dffe77 : dffe
		WITH (
			power_up = "low"
		);
	dffe78 : dffe
		WITH (
			power_up = "low"
		);
	dffe79 : dffe
		WITH (
			power_up = "low"
		);
	dffe8 : dffe
		WITH (
			power_up = "low"
		);
	dffe80 : dffe
		WITH (
			power_up = "low"
		);
	dffe81 : dffe
		WITH (
			power_up = "low"
		);
	dffe82 : dffe
		WITH (
			power_up = "low"
		);
	dffe83 : dffe
		WITH (
			power_up = "low"
		);
	dffe84 : dffe
		WITH (
			power_up = "low"
		);
	dffe85 : dffe
		WITH (
			power_up = "low"
		);
	dffe86 : dffe
		WITH (
			power_up = "low"
		);
	dffe87 : dffe
		WITH (
			power_up = "low"
		);
	dffe88 : dffe
		WITH (
			power_up = "low"
		);
	dffe89 : dffe
		WITH (
			power_up = "low"
		);
	dffe9 : dffe
		WITH (
			power_up = "low"
		);
	dffe90 : dffe
		WITH (
			power_up = "low"
		);
	dffe91 : dffe
		WITH (
			power_up = "low"
		);
	dffe92 : dffe
		WITH (
			power_up = "low"
		);
	dffe93 : dffe
		WITH (
			power_up = "low"
		);
	dffe94 : dffe
		WITH (
			power_up = "low"
		);
	dffe95 : dffe
		WITH (
			power_up = "low"
		);
	dffe96 : dffe
		WITH (
			power_up = "low"
		);
	dffe97 : dffe
		WITH (
			power_up = "low"
		);
	dffe98 : dffe
		WITH (
			power_up = "low"
		);
	dffe99 : dffe
		WITH (
			power_up = "low"
		);
	sft158a[15..0] : soft;
	sft159a[15..0] : soft;
	sft160a[15..0] : soft;
	sft162a[16..0] : soft;
	sft163a[16..0] : soft;
	sft164a[16..0] : soft;
	sft166a[15..0] : soft;
	sft167a[15..0] : soft;
	sft168a[15..0] : soft;
	sft170a[17..0] : soft;
	sft171a[17..0] : soft;
	sft172a[17..0] : soft;
	sft174a[15..0] : soft;
	sft175a[15..0] : soft;
	sft176a[15..0] : soft;
	sft178a[15..0] : soft;
	sft179a[15..0] : soft;
	sft180a[15..0] : soft;
	sft182a[16..0] : soft;
	sft183a[16..0] : soft;
	sft184a[16..0] : soft;
	sft186a[18..0] : soft;
	sft187a[18..0] : soft;
	sft188a[18..0] : soft;
	aclr	: NODE;
	clken	: NODE;
	w311w	: WIRE;
	w673w[18..0]	: WIRE;

BEGIN 
	add157_result[] = sft158a[].out + sft159a[].out;
	add161_result[] = sft162a[].out + sft163a[].out;
	add165_result[] = sft166a[].out + sft167a[].out;
	add169_result[] = sft170a[].out + sft171a[].out;
	add173_result[] = sft174a[].out + sft175a[].out;
	add177_result[] = sft178a[].out + sft179a[].out;
	add181_result[] = sft182a[].out + sft183a[].out;
	add185_result[] = sft186a[].out + sft187a[].out;
	dffe1.clk = clock;
	dffe1.clrn = (! aclr);
	dffe1.d = sft172a[0..0].out;
	dffe1.ena = clken;
	dffe10.clk = clock;
	dffe10.clrn = (! aclr);
	dffe10.d = data[45..45];
	dffe10.ena = clken;
	dffe100.clk = clock;
	dffe100.clrn = (! aclr);
	dffe100.d = data[54..54];
	dffe100.ena = clken;
	dffe101.clk = clock;
	dffe101.clrn = (! aclr);
	dffe101.d = sft172a[10..10].out;
	dffe101.ena = clken;
	dffe102.clk = clock;
	dffe102.clrn = (! aclr);
	dffe102.d = data[70..70];
	dffe102.ena = clken;
	dffe103.clk = clock;
	dffe103.clrn = (! aclr);
	dffe103.d = sft160a[10..10].out;
	dffe103.ena = clken;
	dffe104.clk = clock;
	dffe104.clrn = (! aclr);
	dffe104.d = data[100..100];
	dffe104.ena = clken;
	dffe105.clk = clock;
	dffe105.clrn = (! aclr);
	dffe105.d = data[40..40];
	dffe105.ena = clken;
	dffe106.clk = clock;
	dffe106.clrn = (! aclr);
	dffe106.d = sft184a[10..10].out;
	dffe106.ena = clken;
	dffe107.clk = clock;
	dffe107.clrn = (! aclr);
	dffe107.d = data[85..85];
	dffe107.ena = clken;
	dffe108.clk = clock;
	dffe108.clrn = (! aclr);
	dffe108.d = data[10..10];
	dffe108.ena = clken;
	dffe109.clk = clock;
	dffe109.clrn = (! aclr);
	dffe109.d = data[115..115];
	dffe109.ena = clken;
	dffe11.clk = clock;
	dffe11.clrn = (! aclr);
	dffe11.d = sft172a[1..1].out;
	dffe11.ena = clken;
	dffe110.clk = clock;
	dffe110.clrn = (! aclr);
	dffe110.d = data[55..55];
	dffe110.ena = clken;
	dffe111.clk = clock;
	dffe111.clrn = (! aclr);
	dffe111.d = sft172a[11..11].out;
	dffe111.ena = clken;
	dffe112.clk = clock;
	dffe112.clrn = (! aclr);
	dffe112.d = data[71..71];
	dffe112.ena = clken;
	dffe113.clk = clock;
	dffe113.clrn = (! aclr);
	dffe113.d = sft160a[11..11].out;
	dffe113.ena = clken;
	dffe114.clk = clock;
	dffe114.clrn = (! aclr);
	dffe114.d = data[101..101];
	dffe114.ena = clken;
	dffe115.clk = clock;
	dffe115.clrn = (! aclr);
	dffe115.d = data[41..41];
	dffe115.ena = clken;
	dffe116.clk = clock;
	dffe116.clrn = (! aclr);
	dffe116.d = sft184a[11..11].out;
	dffe116.ena = clken;
	dffe117.clk = clock;
	dffe117.clrn = (! aclr);
	dffe117.d = data[86..86];
	dffe117.ena = clken;
	dffe118.clk = clock;
	dffe118.clrn = (! aclr);
	dffe118.d = data[11..11];
	dffe118.ena = clken;
	dffe119.clk = clock;
	dffe119.clrn = (! aclr);
	dffe119.d = data[116..116];
	dffe119.ena = clken;
	dffe12.clk = clock;
	dffe12.clrn = (! aclr);
	dffe12.d = data[61..61];
	dffe12.ena = clken;
	dffe120.clk = clock;
	dffe120.clrn = (! aclr);
	dffe120.d = data[56..56];
	dffe120.ena = clken;
	dffe121.clk = clock;
	dffe121.clrn = (! aclr);
	dffe121.d = sft172a[12..12].out;
	dffe121.ena = clken;
	dffe122.clk = clock;
	dffe122.clrn = (! aclr);
	dffe122.d = data[72..72];
	dffe122.ena = clken;
	dffe123.clk = clock;
	dffe123.clrn = (! aclr);
	dffe123.d = sft160a[12..12].out;
	dffe123.ena = clken;
	dffe124.clk = clock;
	dffe124.clrn = (! aclr);
	dffe124.d = data[102..102];
	dffe124.ena = clken;
	dffe125.clk = clock;
	dffe125.clrn = (! aclr);
	dffe125.d = data[42..42];
	dffe125.ena = clken;
	dffe126.clk = clock;
	dffe126.clrn = (! aclr);
	dffe126.d = sft184a[12..12].out;
	dffe126.ena = clken;
	dffe127.clk = clock;
	dffe127.clrn = (! aclr);
	dffe127.d = data[87..87];
	dffe127.ena = clken;
	dffe128.clk = clock;
	dffe128.clrn = (! aclr);
	dffe128.d = data[12..12];
	dffe128.ena = clken;
	dffe129.clk = clock;
	dffe129.clrn = (! aclr);
	dffe129.d = data[117..117];
	dffe129.ena = clken;
	dffe13.clk = clock;
	dffe13.clrn = (! aclr);
	dffe13.d = sft160a[1..1].out;
	dffe13.ena = clken;
	dffe130.clk = clock;
	dffe130.clrn = (! aclr);
	dffe130.d = data[57..57];
	dffe130.ena = clken;
	dffe131.clk = clock;
	dffe131.clrn = (! aclr);
	dffe131.d = sft172a[13..13].out;
	dffe131.ena = clken;
	dffe132.clk = clock;
	dffe132.clrn = (! aclr);
	dffe132.d = data[73..73];
	dffe132.ena = clken;
	dffe133.clk = clock;
	dffe133.clrn = (! aclr);
	dffe133.d = sft160a[13..13].out;
	dffe133.ena = clken;
	dffe134.clk = clock;
	dffe134.clrn = (! aclr);
	dffe134.d = data[103..103];
	dffe134.ena = clken;
	dffe135.clk = clock;
	dffe135.clrn = (! aclr);
	dffe135.d = data[43..43];
	dffe135.ena = clken;
	dffe136.clk = clock;
	dffe136.clrn = (! aclr);
	dffe136.d = sft184a[13..13].out;
	dffe136.ena = clken;
	dffe137.clk = clock;
	dffe137.clrn = (! aclr);
	dffe137.d = data[88..88];
	dffe137.ena = clken;
	dffe138.clk = clock;
	dffe138.clrn = (! aclr);
	dffe138.d = data[13..13];
	dffe138.ena = clken;
	dffe139.clk = clock;
	dffe139.clrn = (! aclr);
	dffe139.d = data[118..118];
	dffe139.ena = clken;
	dffe14.clk = clock;
	dffe14.clrn = (! aclr);
	dffe14.d = data[91..91];
	dffe14.ena = clken;
	dffe140.clk = clock;
	dffe140.clrn = (! aclr);
	dffe140.d = data[58..58];
	dffe140.ena = clken;
	dffe141.clk = clock;
	dffe141.clrn = (! aclr);
	dffe141.d = sft172a[14..14].out;
	dffe141.ena = clken;
	dffe142.clk = clock;
	dffe142.clrn = (! aclr);
	dffe142.d = data[74..74];
	dffe142.ena = clken;
	dffe143.clk = clock;
	dffe143.clrn = (! aclr);
	dffe143.d = sft160a[14..14].out;
	dffe143.ena = clken;
	dffe144.clk = clock;
	dffe144.clrn = (! aclr);
	dffe144.d = data[104..104];
	dffe144.ena = clken;
	dffe145.clk = clock;
	dffe145.clrn = (! aclr);
	dffe145.d = data[44..44];
	dffe145.ena = clken;
	dffe146.clk = clock;
	dffe146.clrn = (! aclr);
	dffe146.d = sft184a[14..14].out;
	dffe146.ena = clken;
	dffe147.clk = clock;
	dffe147.clrn = (! aclr);
	dffe147.d = data[89..89];
	dffe147.ena = clken;
	dffe148.clk = clock;
	dffe148.clrn = (! aclr);
	dffe148.d = data[14..14];
	dffe148.ena = clken;
	dffe149.clk = clock;
	dffe149.clrn = (! aclr);
	dffe149.d = data[119..119];
	dffe149.ena = clken;
	dffe15.clk = clock;
	dffe15.clrn = (! aclr);
	dffe15.d = data[31..31];
	dffe15.ena = clken;
	dffe150.clk = clock;
	dffe150.clrn = (! aclr);
	dffe150.d = data[59..59];
	dffe150.ena = clken;
	dffe151.clk = clock;
	dffe151.clrn = (! aclr);
	dffe151.d = sft172a[15..15].out;
	dffe151.ena = clken;
	dffe152.clk = clock;
	dffe152.clrn = (! aclr);
	dffe152.d = sft160a[15..15].out;
	dffe152.ena = clken;
	dffe153.clk = clock;
	dffe153.clrn = (! aclr);
	dffe153.d = sft184a[15..15].out;
	dffe153.ena = clken;
	dffe154.clk = clock;
	dffe154.clrn = (! aclr);
	dffe154.d = sft172a[16..16].out;
	dffe154.ena = clken;
	dffe155.clk = clock;
	dffe155.clrn = (! aclr);
	dffe155.d = sft184a[16..16].out;
	dffe155.ena = clken;
	dffe156.clk = clock;
	dffe156.clrn = (! aclr);
	dffe156.d = sft172a[17..17].out;
	dffe156.ena = clken;
	dffe16.clk = clock;
	dffe16.clrn = (! aclr);
	dffe16.d = sft184a[1..1].out;
	dffe16.ena = clken;
	dffe17.clk = clock;
	dffe17.clrn = (! aclr);
	dffe17.d = data[76..76];
	dffe17.ena = clken;
	dffe18.clk = clock;
	dffe18.clrn = (! aclr);
	dffe18.d = data[1..1];
	dffe18.ena = clken;
	dffe19.clk = clock;
	dffe19.clrn = (! aclr);
	dffe19.d = data[106..106];
	dffe19.ena = clken;
	dffe2.clk = clock;
	dffe2.clrn = (! aclr);
	dffe2.d = data[60..60];
	dffe2.ena = clken;
	dffe20.clk = clock;
	dffe20.clrn = (! aclr);
	dffe20.d = data[46..46];
	dffe20.ena = clken;
	dffe21.clk = clock;
	dffe21.clrn = (! aclr);
	dffe21.d = sft172a[2..2].out;
	dffe21.ena = clken;
	dffe22.clk = clock;
	dffe22.clrn = (! aclr);
	dffe22.d = data[62..62];
	dffe22.ena = clken;
	dffe23.clk = clock;
	dffe23.clrn = (! aclr);
	dffe23.d = sft160a[2..2].out;
	dffe23.ena = clken;
	dffe24.clk = clock;
	dffe24.clrn = (! aclr);
	dffe24.d = data[92..92];
	dffe24.ena = clken;
	dffe25.clk = clock;
	dffe25.clrn = (! aclr);
	dffe25.d = data[32..32];
	dffe25.ena = clken;
	dffe26.clk = clock;
	dffe26.clrn = (! aclr);
	dffe26.d = sft184a[2..2].out;
	dffe26.ena = clken;
	dffe27.clk = clock;
	dffe27.clrn = (! aclr);
	dffe27.d = data[77..77];
	dffe27.ena = clken;
	dffe28.clk = clock;
	dffe28.clrn = (! aclr);
	dffe28.d = data[2..2];
	dffe28.ena = clken;
	dffe29.clk = clock;
	dffe29.clrn = (! aclr);
	dffe29.d = data[107..107];
	dffe29.ena = clken;
	dffe3.clk = clock;
	dffe3.clrn = (! aclr);
	dffe3.d = sft160a[0..0].out;
	dffe3.ena = clken;
	dffe30.clk = clock;
	dffe30.clrn = (! aclr);
	dffe30.d = data[47..47];
	dffe30.ena = clken;
	dffe31.clk = clock;
	dffe31.clrn = (! aclr);
	dffe31.d = sft172a[3..3].out;
	dffe31.ena = clken;
	dffe32.clk = clock;
	dffe32.clrn = (! aclr);
	dffe32.d = data[63..63];
	dffe32.ena = clken;
	dffe33.clk = clock;
	dffe33.clrn = (! aclr);
	dffe33.d = sft160a[3..3].out;
	dffe33.ena = clken;
	dffe34.clk = clock;
	dffe34.clrn = (! aclr);
	dffe34.d = data[93..93];
	dffe34.ena = clken;
	dffe35.clk = clock;
	dffe35.clrn = (! aclr);
	dffe35.d = data[33..33];
	dffe35.ena = clken;
	dffe36.clk = clock;
	dffe36.clrn = (! aclr);
	dffe36.d = sft184a[3..3].out;
	dffe36.ena = clken;
	dffe37.clk = clock;
	dffe37.clrn = (! aclr);
	dffe37.d = data[78..78];
	dffe37.ena = clken;
	dffe38.clk = clock;
	dffe38.clrn = (! aclr);
	dffe38.d = data[3..3];
	dffe38.ena = clken;
	dffe39.clk = clock;
	dffe39.clrn = (! aclr);
	dffe39.d = data[108..108];
	dffe39.ena = clken;
	dffe4.clk = clock;
	dffe4.clrn = (! aclr);
	dffe4.d = data[90..90];
	dffe4.ena = clken;
	dffe40.clk = clock;
	dffe40.clrn = (! aclr);
	dffe40.d = data[48..48];
	dffe40.ena = clken;
	dffe41.clk = clock;
	dffe41.clrn = (! aclr);
	dffe41.d = sft172a[4..4].out;
	dffe41.ena = clken;
	dffe42.clk = clock;
	dffe42.clrn = (! aclr);
	dffe42.d = data[64..64];
	dffe42.ena = clken;
	dffe43.clk = clock;
	dffe43.clrn = (! aclr);
	dffe43.d = sft160a[4..4].out;
	dffe43.ena = clken;
	dffe44.clk = clock;
	dffe44.clrn = (! aclr);
	dffe44.d = data[94..94];
	dffe44.ena = clken;
	dffe45.clk = clock;
	dffe45.clrn = (! aclr);
	dffe45.d = data[34..34];
	dffe45.ena = clken;
	dffe46.clk = clock;
	dffe46.clrn = (! aclr);
	dffe46.d = sft184a[4..4].out;
	dffe46.ena = clken;
	dffe47.clk = clock;
	dffe47.clrn = (! aclr);
	dffe47.d = data[79..79];
	dffe47.ena = clken;
	dffe48.clk = clock;
	dffe48.clrn = (! aclr);
	dffe48.d = data[4..4];
	dffe48.ena = clken;
	dffe49.clk = clock;
	dffe49.clrn = (! aclr);
	dffe49.d = data[109..109];
	dffe49.ena = clken;
	dffe5.clk = clock;
	dffe5.clrn = (! aclr);
	dffe5.d = data[30..30];
	dffe5.ena = clken;
	dffe50.clk = clock;
	dffe50.clrn = (! aclr);
	dffe50.d = data[49..49];
	dffe50.ena = clken;
	dffe51.clk = clock;
	dffe51.clrn = (! aclr);
	dffe51.d = sft172a[5..5].out;
	dffe51.ena = clken;
	dffe52.clk = clock;
	dffe52.clrn = (! aclr);
	dffe52.d = data[65..65];
	dffe52.ena = clken;
	dffe53.clk = clock;
	dffe53.clrn = (! aclr);
	dffe53.d = sft160a[5..5].out;
	dffe53.ena = clken;
	dffe54.clk = clock;
	dffe54.clrn = (! aclr);
	dffe54.d = data[95..95];
	dffe54.ena = clken;
	dffe55.clk = clock;
	dffe55.clrn = (! aclr);
	dffe55.d = data[35..35];
	dffe55.ena = clken;
	dffe56.clk = clock;
	dffe56.clrn = (! aclr);
	dffe56.d = sft184a[5..5].out;
	dffe56.ena = clken;
	dffe57.clk = clock;
	dffe57.clrn = (! aclr);
	dffe57.d = data[80..80];
	dffe57.ena = clken;
	dffe58.clk = clock;
	dffe58.clrn = (! aclr);
	dffe58.d = data[5..5];
	dffe58.ena = clken;
	dffe59.clk = clock;
	dffe59.clrn = (! aclr);
	dffe59.d = data[110..110];
	dffe59.ena = clken;
	dffe6.clk = clock;
	dffe6.clrn = (! aclr);
	dffe6.d = sft184a[0..0].out;
	dffe6.ena = clken;
	dffe60.clk = clock;
	dffe60.clrn = (! aclr);
	dffe60.d = data[50..50];
	dffe60.ena = clken;
	dffe61.clk = clock;
	dffe61.clrn = (! aclr);
	dffe61.d = sft172a[6..6].out;
	dffe61.ena = clken;
	dffe62.clk = clock;
	dffe62.clrn = (! aclr);
	dffe62.d = data[66..66];
	dffe62.ena = clken;
	dffe63.clk = clock;
	dffe63.clrn = (! aclr);
	dffe63.d = sft160a[6..6].out;
	dffe63.ena = clken;
	dffe64.clk = clock;
	dffe64.clrn = (! aclr);
	dffe64.d = data[96..96];
	dffe64.ena = clken;
	dffe65.clk = clock;
	dffe65.clrn = (! aclr);
	dffe65.d = data[36..36];
	dffe65.ena = clken;
	dffe66.clk = clock;
	dffe66.clrn = (! aclr);
	dffe66.d = sft184a[6..6].out;
	dffe66.ena = clken;
	dffe67.clk = clock;
	dffe67.clrn = (! aclr);
	dffe67.d = data[81..81];
	dffe67.ena = clken;
	dffe68.clk = clock;
	dffe68.clrn = (! aclr);
	dffe68.d = data[6..6];
	dffe68.ena = clken;
	dffe69.clk = clock;
	dffe69.clrn = (! aclr);
	dffe69.d = data[111..111];
	dffe69.ena = clken;
	dffe7.clk = clock;
	dffe7.clrn = (! aclr);
	dffe7.d = data[75..75];
	dffe7.ena = clken;
	dffe70.clk = clock;
	dffe70.clrn = (! aclr);
	dffe70.d = data[51..51];
	dffe70.ena = clken;
	dffe71.clk = clock;
	dffe71.clrn = (! aclr);
	dffe71.d = sft172a[7..7].out;
	dffe71.ena = clken;
	dffe72.clk = clock;
	dffe72.clrn = (! aclr);
	dffe72.d = data[67..67];
	dffe72.ena = clken;
	dffe73.clk = clock;
	dffe73.clrn = (! aclr);
	dffe73.d = sft160a[7..7].out;
	dffe73.ena = clken;
	dffe74.clk = clock;
	dffe74.clrn = (! aclr);
	dffe74.d = data[97..97];
	dffe74.ena = clken;
	dffe75.clk = clock;
	dffe75.clrn = (! aclr);
	dffe75.d = data[37..37];
	dffe75.ena = clken;
	dffe76.clk = clock;
	dffe76.clrn = (! aclr);
	dffe76.d = sft184a[7..7].out;
	dffe76.ena = clken;
	dffe77.clk = clock;
	dffe77.clrn = (! aclr);
	dffe77.d = data[82..82];
	dffe77.ena = clken;
	dffe78.clk = clock;
	dffe78.clrn = (! aclr);
	dffe78.d = data[7..7];
	dffe78.ena = clken;
	dffe79.clk = clock;
	dffe79.clrn = (! aclr);
	dffe79.d = data[112..112];
	dffe79.ena = clken;
	dffe8.clk = clock;
	dffe8.clrn = (! aclr);
	dffe8.d = data[0..0];
	dffe8.ena = clken;
	dffe80.clk = clock;
	dffe80.clrn = (! aclr);
	dffe80.d = data[52..52];
	dffe80.ena = clken;
	dffe81.clk = clock;
	dffe81.clrn = (! aclr);
	dffe81.d = sft172a[8..8].out;
	dffe81.ena = clken;
	dffe82.clk = clock;
	dffe82.clrn = (! aclr);
	dffe82.d = data[68..68];
	dffe82.ena = clken;
	dffe83.clk = clock;
	dffe83.clrn = (! aclr);
	dffe83.d = sft160a[8..8].out;
	dffe83.ena = clken;
	dffe84.clk = clock;
	dffe84.clrn = (! aclr);
	dffe84.d = data[98..98];
	dffe84.ena = clken;
	dffe85.clk = clock;
	dffe85.clrn = (! aclr);
	dffe85.d = data[38..38];
	dffe85.ena = clken;
	dffe86.clk = clock;
	dffe86.clrn = (! aclr);
	dffe86.d = sft184a[8..8].out;
	dffe86.ena = clken;
	dffe87.clk = clock;
	dffe87.clrn = (! aclr);
	dffe87.d = data[83..83];
	dffe87.ena = clken;
	dffe88.clk = clock;
	dffe88.clrn = (! aclr);
	dffe88.d = data[8..8];
	dffe88.ena = clken;
	dffe89.clk = clock;
	dffe89.clrn = (! aclr);
	dffe89.d = data[113..113];
	dffe89.ena = clken;
	dffe9.clk = clock;
	dffe9.clrn = (! aclr);
	dffe9.d = data[105..105];
	dffe9.ena = clken;
	dffe90.clk = clock;
	dffe90.clrn = (! aclr);
	dffe90.d = data[53..53];
	dffe90.ena = clken;
	dffe91.clk = clock;
	dffe91.clrn = (! aclr);
	dffe91.d = sft172a[9..9].out;
	dffe91.ena = clken;
	dffe92.clk = clock;
	dffe92.clrn = (! aclr);
	dffe92.d = data[69..69];
	dffe92.ena = clken;
	dffe93.clk = clock;
	dffe93.clrn = (! aclr);
	dffe93.d = sft160a[9..9].out;
	dffe93.ena = clken;
	dffe94.clk = clock;
	dffe94.clrn = (! aclr);
	dffe94.d = data[99..99];
	dffe94.ena = clken;
	dffe95.clk = clock;
	dffe95.clrn = (! aclr);
	dffe95.d = data[39..39];
	dffe95.ena = clken;
	dffe96.clk = clock;
	dffe96.clrn = (! aclr);
	dffe96.d = sft184a[9..9].out;
	dffe96.ena = clken;
	dffe97.clk = clock;
	dffe97.clrn = (! aclr);
	dffe97.d = data[84..84];
	dffe97.ena = clken;
	dffe98.clk = clock;
	dffe98.clrn = (! aclr);
	dffe98.d = data[9..9];
	dffe98.ena = clken;
	dffe99.clk = clock;
	dffe99.clrn = (! aclr);
	dffe99.d = data[114..114];
	dffe99.ena = clken;
	sft158a[].in = ( w311w, ( data[134..134], ( data[133..133], ( data[132..132], ( data[131..131], ( data[130..130], ( data[129..129], ( data[128..128], ( data[127..127], ( data[126..126], ( data[125..125], ( data[124..124], ( data[123..123], ( data[122..122], ( data[121..120])))))))))))))));
	sft159a[].in = ( w311w, ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..25], ( data[24..24], ( data[23..23], ( data[22..22], ( data[21..21], ( data[20..20], ( data[19..19], ( data[18..18], ( data[17..17], ( data[16..15])))))))))))))));
	sft160a[].in = add157_result[];
	sft162a[].in = ( w311w, ( dffe152.q, ( dffe142.q, ( dffe132.q, ( dffe122.q, ( dffe112.q, ( dffe102.q, ( dffe92.q, ( dffe82.q, ( dffe72.q, ( dffe62.q, ( dffe52.q, ( dffe42.q, ( dffe32.q, ( dffe22.q, ( dffe12.q, dffe2.q))))))))))))))));
	sft163a[].in = ( w311w, ( w311w, ( dffe143.q, ( dffe133.q, ( dffe123.q, ( dffe113.q, ( dffe103.q, ( dffe93.q, ( dffe83.q, ( dffe73.q, ( dffe63.q, ( dffe53.q, ( dffe43.q, ( dffe33.q, ( dffe23.q, ( dffe13.q, dffe3.q))))))))))))))));
	sft164a[].in = add161_result[];
	sft166a[].in = ( w311w, ( dffe144.q, ( dffe134.q, ( dffe124.q, ( dffe114.q, ( dffe104.q, ( dffe94.q, ( dffe84.q, ( dffe74.q, ( dffe64.q, ( dffe54.q, ( dffe44.q, ( dffe34.q, ( dffe24.q, ( dffe14.q, dffe4.q)))))))))))))));
	sft167a[].in = ( w311w, ( dffe145.q, ( dffe135.q, ( dffe125.q, ( dffe115.q, ( dffe105.q, ( dffe95.q, ( dffe85.q, ( dffe75.q, ( dffe65.q, ( dffe55.q, ( dffe45.q, ( dffe35.q, ( dffe25.q, ( dffe15.q, dffe5.q)))))))))))))));
	sft168a[].in = add165_result[];
	sft170a[].in = ( w311w, ( sft164a[16..16].out, ( sft164a[15..15].out, ( sft164a[14..14].out, ( sft164a[13..13].out, ( sft164a[12..12].out, ( sft164a[11..11].out, ( sft164a[10..10].out, ( sft164a[9..9].out, ( sft164a[8..8].out, ( sft164a[7..7].out, ( sft164a[6..6].out, ( sft164a[5..5].out, ( sft164a[4..4].out, ( sft164a[3..3].out, ( sft164a[2..2].out, ( sft164a[1..1].out, sft164a[0..0].out)))))))))))))))));
	sft171a[].in = ( w311w, ( w311w, ( sft176a[15..15].out, ( sft168a[14..14].out, ( sft168a[13..13].out, ( sft168a[12..12].out, ( sft168a[11..11].out, ( sft168a[10..10].out, ( sft168a[9..9].out, ( sft168a[8..8].out, ( sft168a[7..7].out, ( sft168a[6..6].out, ( sft168a[5..5].out, ( sft168a[4..4].out, ( sft168a[3..3].out, ( sft168a[2..2].out, ( sft168a[1..1].out, sft168a[0..0].out)))))))))))))))));
	sft172a[].in = add169_result[];
	sft174a[].in = ( w311w, ( dffe147.q, ( dffe137.q, ( dffe127.q, ( dffe117.q, ( dffe107.q, ( dffe97.q, ( dffe87.q, ( dffe77.q, ( dffe67.q, ( dffe57.q, ( dffe47.q, ( dffe37.q, ( dffe27.q, ( dffe17.q, dffe7.q)))))))))))))));
	sft175a[].in = ( w311w, ( dffe148.q, ( dffe138.q, ( dffe128.q, ( dffe118.q, ( dffe108.q, ( dffe98.q, ( dffe88.q, ( dffe78.q, ( dffe68.q, ( dffe58.q, ( dffe48.q, ( dffe38.q, ( dffe28.q, ( dffe18.q, dffe8.q)))))))))))))));
	sft176a[].in = add173_result[];
	sft178a[].in = ( w311w, ( dffe149.q, ( dffe139.q, ( dffe129.q, ( dffe119.q, ( dffe109.q, ( dffe99.q, ( dffe89.q, ( dffe79.q, ( dffe69.q, ( dffe59.q, ( dffe49.q, ( dffe39.q, ( dffe29.q, ( dffe19.q, dffe9.q)))))))))))))));
	sft179a[].in = ( w311w, ( dffe150.q, ( dffe140.q, ( dffe130.q, ( dffe120.q, ( dffe110.q, ( dffe100.q, ( dffe90.q, ( dffe80.q, ( dffe70.q, ( dffe60.q, ( dffe50.q, ( dffe40.q, ( dffe30.q, ( dffe20.q, dffe10.q)))))))))))))));
	sft180a[].in = add177_result[];
	sft182a[].in = ( w311w, ( sft168a[15..15].out, ( sft176a[14..14].out, ( sft176a[13..13].out, ( sft176a[12..12].out, ( sft176a[11..11].out, ( sft176a[10..10].out, ( sft176a[9..9].out, ( sft176a[8..8].out, ( sft176a[7..7].out, ( sft176a[6..6].out, ( sft176a[5..5].out, ( sft176a[4..4].out, ( sft176a[3..3].out, ( sft176a[2..2].out, ( sft176a[1..1].out, sft176a[0..0].out))))))))))))))));
	sft183a[].in = ( w311w, ( sft180a[15..15].out, ( sft180a[14..14].out, ( sft180a[13..13].out, ( sft180a[12..12].out, ( sft180a[11..11].out, ( sft180a[10..10].out, ( sft180a[9..9].out, ( sft180a[8..8].out, ( sft180a[7..7].out, ( sft180a[6..6].out, ( sft180a[5..5].out, ( sft180a[4..4].out, ( sft180a[3..3].out, ( sft180a[2..2].out, ( sft180a[1..1].out, sft180a[0..0].out))))))))))))))));
	sft184a[].in = add181_result[];
	sft186a[].in = ( w311w, ( dffe156.q, ( dffe154.q, ( dffe151.q, ( dffe141.q, ( dffe131.q, ( dffe121.q, ( dffe111.q, ( dffe101.q, ( dffe91.q, ( dffe81.q, ( dffe71.q, ( dffe61.q, ( dffe51.q, ( dffe41.q, ( dffe31.q, ( dffe21.q, ( dffe11.q, dffe1.q))))))))))))))))));
	sft187a[].in = ( w311w, ( w311w, ( dffe155.q, ( dffe153.q, ( dffe146.q, ( dffe136.q, ( dffe126.q, ( dffe116.q, ( dffe106.q, ( dffe96.q, ( dffe86.q, ( dffe76.q, ( dffe66.q, ( dffe56.q, ( dffe46.q, ( dffe36.q, ( dffe26.q, ( dffe16.q, dffe6.q))))))))))))))))));
	sft188a[].in = add185_result[];
	aclr = GND;
	clken = VCC;
	result[18..0] = w673w[18..0];
	w311w = B"0";
	w673w[] = ( sft188a[18..17].out, sft188a[16..15].out, sft188a[14..13].out, sft188a[12..11].out, sft188a[10..9].out, sft188a[8..7].out, sft188a[6..5].out, sft188a[4..3].out, sft188a[2..1].out, sft188a[0..0].out);
END;
--VALID FILE
