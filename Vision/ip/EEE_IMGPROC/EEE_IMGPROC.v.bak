module EEE_IMGPROC(
	// global clock & reset
	input clk,
	input reset_n,
	
	// mm slave
	input s_chipselect,
	input s_read,
	input s_write,
	output reg [31:0] s_readdata,
	input [31:0] s_writedata,
	input [2:0] s_address,

	// stream sink
	input [23:0] sink_data,
	input sink_valid,
	output sink_ready,
	input sink_sop,
	input sink_eop,
	
	// streaming source
	output [23:0] source_data,
	output source_valid,
	input source_ready,
	output source_sop,
	output source_eop,
	
	// conduit
	input mode
	
);
////////////////////////////////////////////////////////////////////////
parameter IMAGE_W = 11'd640;
parameter IMAGE_H = 11'd480;
parameter MESSAGE_BUF_MAX = 256;
parameter MSG_INTERVAL = 6;
parameter BB_COL_DEFAULT = 24'h00ff00;      // green (default BB color)

// Detection parameters 
parameter SAT_THRESH_DEFAULT = 175;         // about 70%
parameter VAL_THRESH_DEFAULT = 175;         // same
parameter RED_THRESH_H_DEFAULT = 248;       // 350 on the (0-360) hue range
parameter RED_THRESH_L_DEFAULT = 7;         // 10
parameter GREEN_THRESH_H_DEFAULT = 92;      // 130
parameter GREEN_THRESH_L_DEFAULT = 78;      // 110
parameter BLUE_THRESH_H_DEFAULT = 177;      // 250
parameter BLUE_THRESH_L_DEFAULT = 163;      // 230
parameter YELLOW_THRESH_H_DEFAULT = 50;     // 70
parameter YELLOW_THRESH_L_DEFAULT = 35;     // 50
parameter PURPLE_THRESH_H_DEFAULT = 220;    // 310
parameter PURPLE_THRESH_L_DEFAULT = 205;    // 290

// Bounding box colours
parameter RED_BB_COL = 24'h00ffff;
parameter GREEN_BB_COL = 24'hff00ff;
parameter BLUE_BB_COL = 24'hffff00;
parameter YELLOW_BB_COL = 24'hff0000;
parameter PURPLE_BB_COL = 24'h00ff00;

// Colours
wire [7:0] red, green, blue, grey;
wire [7:0] red_out, green_out, blue_out;

// HSV
wire [7:0] hue, saturation, value;
wire wen_hsv, rdy_hsv, valid_hsv;    // output from HSV module

wire sop, eop, in_valid, out_ready;
////////////////////////////////////////////////////////////////////////

// instantiate RGB to HSV
rgb_to_hsv rgb2hsv(
    .clk(clk), .rst_n(reset_n), .wen(wen_hsv),
    .red(red), .green(green), .blue(blue),
    .hue(hue), .saturation(saturation), .value(value),
    .ready(rdy_hsv), .valid(valid_hsv)
);

// HSV driver:
// disregard start of packet (data frame)
sink_ready <= rdy_hsv;          // most of the time 0 unless new sample processed
source_valid <= valid_hsv;      // wait till new HSV sample processed
assign wen_hsv = sink_valid;    // only case don't write to the convertor is if sink is invalid

// detect areas of interest: red, green, blue, yellow, purple
// Detect coloured areas
wire red_detect, yellow_detect, green_detect, blue_detect, purple_detect, sat_detect, value_detect;

assign sat_detect = saturation > SAT_THRESH;
assign value_detect = value > VAL_THRESH;

assign red_detect = (hue > red_threshold_high || hue < red_threshold_low) && sat_detect && value_detect;  // red works a bit different due to wrapping around color wheel
assign yellow_detect = (hue < yellow_threshold_high || hue > yellow_threshold_low) && sat_detect && value_detect;
assign green_detect = (hue < green_threshold_high || hue > green_threshold_low) && sat_detect && value_detect;
assign blue_detect = (hue < blue_threshold_high || hue > blue_threshold_low) && sat_detect && value_detect;
assign purple_detect = (hue < purple_threshold_high || hue > purple_threshold_low) && sat_detect && value_detect;

// Find boundary of cursor box

// Highlight detected areas
// Grayscale conversion process here
wire [23:0] highlight;
assign grey = green[7:1] + red[7:2] + blue[7:2]; //Grey = green/2 + red/4 + blue/4
assign highlight =  red_detect ? {8'hff, 8'h0, 8'h0} : \
                    yellow_detect ? {8'hff, 8'hff, 8'h0} : \
                    green_detect ? {8'h0, 8'hff, 8'h0} : \
                    blue_detect ? {8'h0, 8'h0, 8'hff} : \
                    purple_detect ? {8'hff, 8'h0, 8'hff} : {grey, grey, grey};

// Show bounding box
wire [23:0] new_image;
wire bb_active_red, bb_active_green, bb_active_blue, bb_active_yellow, bb_active_purple;
assign bb_active_red = (x == left_red) | (x == right_red) | (y == top_red) | (y == bottom_red);
assign bb_active_green = (x == left_green) | (x == right_green) | (y == top_green) | (y == bottom_green);
assign bb_active_blue = (x == left_blue) | (x == right_blue) | (y == top_blue) | (y == bottom_blue);
assign bb_active_yellow = (x == left_yellow) | (x == right_yellow) | (y == top_yellow) | (y == bottom_yellow);
assign bb_active_purple = (x == left_purple) | (x == right_purple) | (y == top_purple) | (y == bottom_purple);

assign new_image =  bb_active_red ? RED_BB_COL : \
                    bb_active_green ? GREEN_BB_COL : \
                    bb_active_blue ? BLUE_BB_COL : \
                    bb_active_yellow ? YELLOW_BB_COL : \
                    bb_active_purple ? PURPLE_BB_COL : highlight;

// Switch output pixels depending on mode switch
// Don't modify the start-of-packet word - it's a packet descriptor
// Don't modify data in non-video packets
assign {red_out, green_out, blue_out} = (mode & ~sop & packet_video) ? new_image : {red,green,blue};

//Count valid pixels to get the image coordinates. Reset and detect packet type on Start of Packet.
reg [10:0] x, y;
reg packet_video;
always@(posedge clk) begin
	if (sop) begin
		x <= 11'h0;
		y <= 11'h0;
		packet_video <= (blue[3:0] == 3'h0);
	end
	else if (in_valid) begin
		if (x == IMAGE_W-1) begin
			x <= 11'h0;
			y <= y + 11'h1;
		end
		else begin
			x <= x + 11'h1;
		end
	end
end

//Find first and last red pixels for each color
reg [10:0] x_min_red, y_min_red, x_max_red, y_max_red;
reg [10:0] x_min_green, y_min_green, x_max_green, y_max_green;
reg [10:0] x_min_blue, y_min_blue, x_max_blue, y_max_blue;
reg [10:0] x_min_yellow, y_min_yellow, x_max_yellow, y_max_yellow;
reg [10:0] x_min_purple, y_min_purple, x_max_purple, y_max_purple;

always@(posedge clk) begin
	if (red_detect & in_valid) begin	//Update bounds when the pixel is red
		if (x < x_min_red) x_min_red <= x;
		if (x > x_max_red) x_max_red <= x;
		if (y < y_min_red) y_min_red <= y;
		y_max_red <= y;
	end
    if (green_detect & in_valid) begin	//Update bounds when the pixel is green
		if (x < x_min_green) x_min_green <= x;
		if (x > x_max_green) x_max_green <= x;
		if (y < y_min_green) y_min_green <= y;
		y_max_green <= y;
	end
    if (blue_detect & in_valid) begin	//Update bounds when the pixel is blue
		if (x < x_min_blue) x_min_blue <= x;
		if (x > x_max_blue) x_max_blue <= x;
		if (y < y_min_blue) y_min_blue <= y;
		y_max_blue <= y;
	end
    if (yellow_detect & in_valid) begin	//Update bounds when the pixel is yellow
		if (x < x_min_yellow) x_min_yellow <= x;
		if (x > x_max_yellow) x_max_yellow <= x;
		if (y < y_min_yellow) y_min_yellow <= y;
		y_max_yellow <= y;
	end
    if (purple_detect & in_valid) begin	//Update bounds when the pixel is purple
		if (x < x_min_purple) x_min_purple <= x;
		if (x > x_max_purple) x_max_purple <= x;
		if (y < y_min_purple) y_min_purple <= y;
		y_max_purple <= y;
	end

	if (sop & in_valid) begin	//Reset bounds on start of packet
		x_min_red <= IMAGE_W-11'h1;
		x_max_red <= 0;
		y_min_red <= IMAGE_H-11'h1;
		y_max_red <= 0;

        x_min_green <= IMAGE_W-11'h1;
		x_max_green <= 0;
		y_min_green <= IMAGE_H-11'h1;
		y_max_green <= 0;

        x_min_blue <= IMAGE_W-11'h1;
		x_max_blue <= 0;
		y_min_blue <= IMAGE_H-11'h1;
		y_max_blue <= 0;

        x_min_yellow <= IMAGE_W-11'h1;
		x_max_yellow <= 0;
		y_min_yellow <= IMAGE_H-11'h1;
		y_max_yellow <= 0;

        x_min_purple <= IMAGE_W-11'h1;
		x_max_purple <= 0;
		y_min_purple <= IMAGE_H-11'h1;
		y_max_purple <= 0;
	end
end

//Process bounding box at the end of the frame.
reg [1:0] msg_state;
reg [10:0] left, right, top, bottom;
reg [7:0] frame_count;
always@(posedge clk) begin
	if (eop & in_valid & packet_video) begin  //Ignore non-video packets
		//Latch edges for display overlay on next frame
		left_red <= x_min_red;
		right_red <= x_max_red;
		top_red <= y_min_red;
		bottom_red <= y_max_red;

        left_green <= x_min_green;
		right_green <= x_max_green;
		top_green <= y_min_green;
		bottom_green <= y_max_green;

		left_blue <= x_min_blue;
		right_blue <= x_max_blue;
		top_blue <= y_min_blue;
		bottom_blue <= y_max_blue;		
        
        left_yellow <= x_min_yellow;
		right_yellow <= x_max_yellow;
		top_yellow <= y_min_yellow;
		bottom_yellow <= y_max_yellow;		
        
        left_purple <= x_min_purple;
		right_purple <= x_max_purple;
		top_purple <= y_min_purple;
		bottom_purple <= y_max_purple;
		
		//Start message writer FSM once every MSG_INTERVAL frames, if there is room in the FIFO
		frame_count <= frame_count - 1;
		
		if (frame_count == 0 && msg_buf_size < MESSAGE_BUF_MAX - 3) begin
			msg_state <= 2'b01;
			frame_count <= MSG_INTERVAL-1;
		end
	end
	
	// Cycle through message writer states once started
    // How to do this? 
	if (msg_state != 2'b00) msg_state <= msg_state + 2'b01;
end
	
//Generate output messages for CPU
reg [31:0] msg_buf_in; 
wire [31:0] msg_buf_out;
reg msg_buf_wr;
wire msg_buf_rd, msg_buf_flush;
wire [7:0] msg_buf_size;
wire msg_buf_empty;

`define RED_BOX_MSG_ID "RBB"
`define GREEN_BOX_MSG_ID "GBB"
`define BLUE_BOX_MSG_ID "BBB"
`define YELLOW_BOX_MSG_ID "YBB"
`define PURPLE_BOX_MSG_ID "PBB"

// TODO update
always@(*) begin	//Write words to FIFO as state machine advances
	case(msg_state)
		2'b00: begin
			msg_buf_in = 32'b0;
			msg_buf_wr = 1'b0;
		end
		2'b01: begin
			msg_buf_in = `RED_BOX_MSG_ID;	//Message ID
			msg_buf_wr = 1'b1;
		end
		2'b10: begin
			msg_buf_in = {5'b0, x_min, 5'b0, y_min};	//Top left coordinate
			msg_buf_wr = 1'b1;
		end
		2'b11: begin
			msg_buf_in = {5'b0, x_max, 5'b0, y_max}; //Bottom right coordinate
			msg_buf_wr = 1'b1;
		end
	endcase
end


//Output message FIFO
MSG_FIFO	MSG_FIFO_inst (
	.clock (clk),
	.data (msg_buf_in),
	.rdreq (msg_buf_rd),
	.sclr (~reset_n | msg_buf_flush),
	.wrreq (msg_buf_wr),
	.q (msg_buf_out),
	.usedw (msg_buf_size),
	.empty (msg_buf_empty)
	);


//Streaming registers to buffer video signal
STREAM_REG #(.DATA_WIDTH(26)) in_reg (
	.clk(clk),
	.rst_n(reset_n),
	.ready_out(sink_ready),
	.valid_out(in_valid),
	.data_out({red,green,blue,sop,eop}),
	.ready_in(out_ready),
	.valid_in(sink_valid),
	.data_in({sink_data,sink_sop,sink_eop})
);

STREAM_REG #(.DATA_WIDTH(26)) out_reg (
	.clk(clk),
	.rst_n(reset_n),
	.ready_out(out_ready),
	.valid_out(source_valid),
	.data_out({source_data,source_sop,source_eop}),
	.ready_in(source_ready),
	.valid_in(in_valid),
	.data_in({red_out, green_out, blue_out, sop, eop})
);


/////////////////////////////////
///    Memory-mapped port     ///
/////////////////////////////////

// Addresses
`define REG_STATUS  0
`define READ_MSG    1
`define READ_ID    	2
`define REG_BBCOL	3
`define REG_THRESH  4

// Status register bits
// 31:16 - unimplemented
// 15:8 - number of words in message buffer (read only)
// 7:5 - unused
// 4 - flush message buffer (write only - read as 0)
// 3:0 - unused

// Threshold register:
// 31:16 - what to write to
// 15:8 - unused
// 7:0 - 8-bit threshold value

// Process write

reg [7:0] reg_status;
reg	[23:0] bb_col;  // bounding box color

reg [7:0] sat_threshold;
reg [7:0] value_threshold;
reg [7:0] red_threshold_high;
reg [7:0] red_threshold_low;
reg [7:0] green_threshold_high;
reg [7:0] green_threshold_low;
reg [7:0] blue_threshold_high;
reg [7:0] blue_threshold_low;
reg [7:0] yellow_threshold_high;
reg [7:0] yellow_threshold_low;
reg [7:0] purple_threshold_high;
reg [7:0] purple_threshold_low;

always @ (posedge clk)
begin
	if (~reset_n)
	begin
		reg_status <= 8'b0;
		bb_col <= BB_COL_DEFAULT;
        
        // Detection parameters
        sat_threshold <= SAT_THRESH_DEFAULT;
        value_threshold <= VAL_THRESH_DEFAULT;

        red_threshold_high <= RED_THRESH_H_DEFAULT;
        red_threshold_low <= RED_THRESH_L_DEFAULT;
        green_threshold_high <= GREEN_THRESH_H_DEFAULT;
        green_threshold_low <= GREEN_THRESH_L_DEFAULT;
        blue_threshold_high <= BLUE_THRESH_H_DEFAULT;
        blue_threshold_low <= BLUE_THRESH_L_DEFAULT;
        yellow_threshold_high <= YELLOW_THRESH_H_DEFAULT;
        yellow_threshold_low <= YELLOW_THRESH_L_DEFAULT;
        purple_threshold_high <= PURPLE_THRESH_H_DEFAULT;
        purple_threshold_low <= PURPLE_THRESH_L_DEFAULT;
	end
	else begin
		if(s_chipselect & s_write) begin
		   if (s_address == `REG_STATUS) reg_status <= s_writedata[7:0];
		   if (s_address == `REG_BBCOL)	bb_col <= s_writedata[23:0];
           if (s_address == `REG_THRESH) begin
               case (s_writedata[31:16])
               0: sat_threshold <= s_writedata[7:0];
               1: value_threshold <= s_writedata[7:0];
               2: red_threshold_high <= s_writedata[7:0];
               3: red_threshold_low <= s_writedata[7:0];
               4: green_threshold_high <= s_writedata[7:0];
               5: green_threshold_low <= s_writedata[7:0];
               6: blue_threshold_high <= s_writedata[7:0];
               7: blue_threshold_low <= s_writedata[7:0];
               8: yellow_threshold_high <= s_writedata[7:0];
               9: yellow_threshold_low <= s_writedata[7:0];
               10: purple_threshold_high <= s_writedata[7:0];
               11: purple_threshold_low <= s_writedata[7:0];
               endcase
           end
		end
	end
end

//Flush the message buffer if 1 is written to status register bit 4
assign msg_buf_flush = (s_chipselect & s_write & (s_address == `REG_STATUS) & s_writedata[4]);

// Process reads
reg read_d; //Store the read signal for correct updating of the message buffer

// Copy the requested word to the output port when there is a read.
always @ (posedge clk)
begin
   if (~reset_n) begin
	   s_readdata <= {32'b0};
		read_d <= 1'b0;
	end
	
	else if (s_chipselect & s_read) begin
		if   (s_address == `REG_STATUS) s_readdata <= {16'b0,msg_buf_size,reg_status};
		if   (s_address == `READ_MSG) s_readdata <= {msg_buf_out};
		if   (s_address == `READ_ID) s_readdata <= 32'h1234EEE2;
		if   (s_address == `REG_BBCOL) s_readdata <= {8'h0, bb_col};
	end
	
	read_d <= s_read;
end

//Fetch next word from message buffer after read from READ_MSG
assign msg_buf_rd = s_chipselect & s_read & ~read_d & ~msg_buf_empty & (s_address == `READ_MSG);

endmodule

