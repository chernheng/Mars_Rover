// TODO: add "smooth detection"

module smooth_detect (
    input clk,
    input rst_n,

    input [10:0] x,
    input [10:0] y,    // current x and y coordinates

    input [7:0] hue,
    input [7:0] sat,
    input [7:0] val,
    input sop, eop,
    // Don't attempt to do anything for SOP/EOP (or when inputs are not valid)
    // Relevant values are only clocked out on EOP
    input valid,    // Of course don't do anything if output is not valid
    // (connect to HSV valid)

    input wen,  // Edit internal values for thresholding
    input [1:0] sel,    // see enum
    input [7:0] data,   // input data

    // output [17:0] blob_size,    // log2(640x480) = 18 bits (unrealistic) - just calc on the spot
    output detected,

    output reg [10:0] max_x,
    output reg [10:0] max_y,
    output reg [10:0] min_x,
    output reg [10:0] min_y // for BB
);

// parameter NUM_BUFS = 2;             // number of things to actively track 
/* Too hard to parameterise! Don't do it. */
parameter SAT_THRESH = 8'd175;         // about 70%
parameter VAL_THRESH = 8'd175;         // same
parameter HUE_THRESH_H = 8'd248;       // 350 on the (0-360) hue range
parameter HUE_THRESH_L = 8'd7;         // 10
parameter IS_RED = 1'b1;               // is it red? *affects detection logic

// When user parameters change, do not perform any processing till the next pkt
reg wen_valid;

reg [7:0] sat_threshold, val_threshold, hue_threshold_h, hue_threshold_l;
wire sat_detect = (sat >= sat_threshold);
wire val_detect = (val >= val_threshold);
wire hue_detect = IS_RED ?
                    (hue >= hue_threshold_h || hue <= hue_threshold_l) : 
                    (hue <= hue_threshold_h && hue >= hue_threshold_l);
// red works a bit different due to wrapping around color wheel
wire detect = sat_detect && val_detect && hue_detect;
assign detected = detect;

// Two registers for keeping things in check
reg [10:0] first_x1, first_y1, last_x1, last_y1;
reg [10:0] first_x2, first_y2, last_x2, last_y2;
// Registers for keeping a running account of the number of pixels (size)
// log2(640*480)=18.22 bits->19-bit
reg [18:0] size1, size2;
// Reg for seeing the next register to put an unregistered pixel in
// reg clean1, clean2;
// If the current pixel belongs to the current bin
wire in_bin1x = (x == (last_x1+1) );
wire in_bin1y = (y == (last_y1+1) && (x<last_x1) && (x>first_x1) );
wire in_bin2x = (x == (last_x2+1) );
wire in_bin2y = (y == (last_y2+1) && (x<last_x2) && (x>first_x2) );
wire in_bin1 = in_bin1x || in_bin1y;
wire in_bin2 = in_bin2x || in_bin2y;

wire size_cmp = size1 >= size2;
reg size_cmp_reg;

always @ (posedge clk) begin
    if (~rst_n) begin
        // Reset
        first_x1 <= 0;
        first_y1 <= 0;
        last_x1 <= 0;
        last_y1 <= 0;
        
        first_x2 <= 0;
        first_y2 <= 0;
        last_x2 <= 0;
        last_y2 <= 0;
        
        size1 <= 0;
        size2 <= 0;

        wen_valid <= 0;

        sat_threshold <= SAT_THRESH;
        val_threshold <= VAL_THRESH;
        hue_threshold_h <= HUE_THRESH_H;
        hue_threshold_l <= HUE_THRESH_L;
    end else begin
        size_cmp_reg <= size_cmp;   // comapre size

        if (wen) begin
            wen_valid <= 1; // Content has been modified, current vals don't make sense.

            case (sel)    // see enum
            2'b00: sat_threshold <= data;
            2'b01: val_threshold <= data;
            2'b10: hue_threshold_h <= data;
            2'b11: hue_threshold_l <= data;
            endcase
        end else if (valid) begin
            if (sop) begin
                // Reset all
                first_x1 <= 0;
                first_y1 <= 0;
                last_x1 <= 0;
                last_y1 <= 0;
                
                first_x2 <= 0;
                first_y2 <= 0;
                last_x2 <= 0;
                last_y2 <= 0;
                
                size1 <= 0;
                size2 <= 0;

                wen_valid <= 0;
            end else if (eop) begin
                max_x <= (size_cmp) ? last_x1 : last_x2;
                max_y <= (size_cmp) ? last_y1 : last_y2;
                min_x <= (size_cmp) ? first_x1 : first_x2;
                min_y <= (size_cmp) ? first_y1 : first_y2;
            end else if (detect && ~wen_valid) begin
                // 3 cases for in_bin1, in_bin2:
                if (in_bin1 && in_bin2) begin
                    // Merge two banks (to the larger one)
                    if (size_cmp) begin
                        size1 <= size1 + size2 + 1;
                        size2 <= 0;

                        if (first_x2 < first_x1) first_x1 <= first_x2;
                        if (last_x2 > last_x1) last_x1 <= last_x2;
                        if (first_y2 < first_y1) first_y1 <= first_y2;
                        if (last_y2 > last_y1) last_y1 <= last_y2;

                        // clean1 <= 1;
                        // clean2 <= 0;    // Overwrite 2
                    end else begin
                        size2 <= size1 + size2 + 1;
                        size1 <= 0;

                        if (first_x1 < first_x2) first_x2 <= first_x1;
                        if (last_x1 > last_x2) last_x2 <= last_x1;
                        if (first_y1 < first_y2) first_y2 <= first_y1;
                        if (last_y1 > last_y2) last_y2 <= last_y1;
                        
                        // clean1 <= 0;
                        // clean2 <= 1;    // Overwrite 1
                    end
                end else if (in_bin1 ^ in_bin2) begin
                    // Only update one, and only one should be true anyway.
                    last_x1 <= in_bin1 ? x : last_x1;
                    last_y1 <= in_bin1 ? y : last_y1;
                    last_x2 <= in_bin2 ? x : last_x2;
                    last_y2 <= in_bin2 ? y : last_y2;

                    size1 <= size1 + in_bin1;
                    size2 <= size2 + in_bin2;   // only one shld be active anyway

                    // clean1 <= 1;
                    // clean2 <= 1;
                end else begin
                    // Overwrite the smaller register
                    if (size_cmp) begin
                        first_x2 <= x;
                        first_y2 <= y;
                        last_x2 <= x;
                        last_y2 <= y;

                        size2 <= 1; // Overwrite 2
                    end else begin
                        first_x1 <= x;
                        first_y1 <= y;
                        last_x1 <= x;
                        last_y1 <= y;

                        size1 <= 1; // Overwrite 1
                    end
                end
            end
        end
    end
end

endmodule